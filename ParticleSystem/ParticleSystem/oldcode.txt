#ifdef SPIRAL_DIST
	//spiral distribution using polar equation r(t)=e^(theta*b) modified for variety in branch 
	//density is 1/(current theta/(pi/2)
	//using formula from this study https://arxiv.org/ftp/arxiv/papers/0908/0908.0892.pdf

	//constants for equation
	float scale = 500;
	float N = 4;
	float B = .5;

	int numArms = 2;	//this is how many times the curve will be rotated and populated

	float intervalStart = 0;
	float intervalEnd = PI;
	float intervalLength = (intervalEnd - intervalStart);

	float particleStart = 0;
	float particleEnd = numParticles;

	for (int armIt = 0; armIt < numArms; armIt++)
	{
		//seperate rotations must be performed for each arm
		float rotation = armIt * (2*PI / numArms);	//equally spaced rotations around circle
		float cr = cos(rotation);
		float sr = sin(rotation);

		particleEnd = (armIt + 1) * numParticles / numArms;
		particleStart = (armIt) * numParticles / numArms;

		float step = intervalLength/(particleEnd-particleStart);
		float cTheta = 0;	//current theta


		for (int partIt = particleStart; partIt < particleEnd; partIt++)
		{
			//step = intervalLength / (particleEnd - partIt);
			int index = partIt * 3;

			//find r
			float r = scale / (B * log(tan(cTheta / (2 * N))));

			//calculate x and y coordinates
			p_type x = cos(cTheta) * r;
			p_type y = sin(cTheta) * r;

			//rotate point around origin
			x = x*cr - y * sr;
			y = x*sr + y*cr;

			//apply variation
			p_type xVary = (p_type)static_cast <float> (rand()) / static_cast <float> (RAND_MAX)* 1000;	//400 pixel width of arm
			p_type yVary = (p_type)static_cast <float> (rand()) / static_cast <float> (RAND_MAX)* 1000;

			p_type z = (p_type)static_cast <float> (rand()) / static_cast <float> (RAND_MAX)* 1000;	//const depth of arm

			//change step to reflect particle density
			//step = intervalLength / (particleEnd);// -partIt);


			
			//initialize particle
			h_pos[index] = x+xVary;
			h_pos[index + 1] = y+yVary;
			h_pos[index + 2] = z;

			auto tang = getTangentO(h_pos, index);
			p_type dist = getMagO(h_pos, index);
			p_type oV = sqrt(EARTH_KG*2 / (dist * 100));
			h_vel[index] = std::get<0>(tang) * oV;
			h_vel[index + 1] = std::get<1>(tang) * oV;
			h_vel[index + 2] = std::get<2>(tang) * oV;

			h_acc[index] = 0;
			h_acc[index + 1] = 0;
			h_acc[index + 2] = 0;

			h_mass[partIt] = EARTH_KG;

			//increment theta
			cTheta += step;

		}

	}
	/*
	size_t size = sizeof(p_type) * 3 * numParticles;
	cudaError_t err = cudaSuccess;
	err = cudaMemcpy(d_pos, h_pos, size, cudaMemcpyHostToDevice);
	err = cudaMemcpy(d_vel, h_vel, size, cudaMemcpyHostToDevice);
	err = cudaMemcpy(d_acc, h_acc, size, cudaMemcpyHostToDevice);
	err = cudaMemcpy(d_mass, h_mass, size/3, cudaMemcpyHostToDevice);
	*/
//	free(h_pos);
//	h_pos = (p_type*)malloc(size);

#endif
#ifdef DISK_DIST
	float maxRadius = 1000;
	float depth = 500;
	long long massAvg = 1;
	for (unsigned int partIt = 0; partIt < numParticles; partIt++)
	{

		int index = partIt * 3;
		float angle = (p_type)static_cast <float> (rand()) / static_cast <float> (RAND_MAX)* 2* PI ;

		float rp = partIt - numParticles;

		float power = 0.0;
		float rstep = (maxRadius/numParticles) * partIt;
		float r = rstep;// numParticles / (log(maxRadius)*rstep);//(maxRadius * (pow(partIt, power) / pow(numParticles, power)));
		//float r = (((p_type)static_cast <float> (rand()) / static_cast <float> (RAND_MAX))*maxRadius)

		p_type x = cos(angle) * r;
		p_type y = sin(angle) * r;
		p_type z = pow((p_type)static_cast <float> (rand()) / static_cast <float> (RAND_MAX), 1.2) * depth;

		h_pos[index] = x;
		h_pos[index + 1] = y;
		h_pos[index + 2] = z;

		auto tang = getTangentO(h_pos, index);
		p_type distsqr = getMagO(h_pos, index);
		p_type invDist = fInvSqrt((float)distsqr);
		p_type dist = 1 / invDist;

		h_mass[partIt] = EARTH_KG/distsqr;// ((pow((p_type)static_cast <float> (rand()) / static_cast <float> (RAND_MAX), 1) * 100) + EARTH_KG) / dist;
		massAvg += h_mass[partIt]/distsqr;

		p_type Rm = massAvg;


		p_type oV = sqrt(Rm / dist);
		//p_type oV = 2*PI; // dist / pow(1 + distsqr, 3 / 4);
		h_vel[index] =  std::get<0>(tang) * oV;
		h_vel[index + 1] =  std::get<1>(tang) * oV;
		h_vel[index + 2] =  std::get<2>(tang) * oV;

		h_acc[index] = 0;
		h_acc[index + 1] = 0;
		h_acc[index + 2] = 0;


	}